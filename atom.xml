<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zoro</title>
  
  <subtitle>When u want to fly, I guess the wind will do a favor.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-12T23:42:07.561Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zoilo Xi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>R语言入门之数据类型简介</title>
    <link href="http://yoursite.com/2018/05/13/R%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/05/13/R语言入门之数据类型简介/</id>
    <published>2018-05-12T23:24:51.000Z</published>
    <updated>2018-05-12T23:42:07.561Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，R是一门用于统计计算和作图的语言。但是，R不仅仅只是一门编程语言，由开发者们所提供的海量R包，使得R更像是一个用于数据计算与分析的环境。R是一个非常灵活的平台，是专用于探索、展示和理解数据的语言。既然在R中，一切都是与数据有关。那么就让我们先来认识一下R语言中，数据有哪些表示结构或者类型。<br><a id="more"></a></p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>在R语言中，一切操作都与数据有关，但是在大部分情况下，数据并不是单一出现，而是作为一个整体或者集合出现，譬如学校中某个班级中男生的身高。我们将这类数据集合称之为数据集。数据集具有一定的组成结构，它通常是一个矩形数组，数组的行表示观测，列表示变量。如身高值，height作为列名，表示身高这一变量；男生A、B…作为行名，表示每一个观测值即身高具体值。这与统计学中的观测和变量是一致的。而在其他行业中，比如数据库，变量又被称为字段，观测则是记录；如果在机器学习中，观测则被取名为示例，变量作为属性出现。</p><h2 id="R语言中的数据对象类型"><a href="#R语言中的数据对象类型" class="headerlink" title="R语言中的数据对象类型"></a>R语言中的数据对象类型</h2><p>虽然数据大部分以数据集的形式存在，但是如果就此将数据统一以数据集的形式进行操作处理，并不适合所有情境；针对特定的处理情境，产生特定的数据结构及相关操作才是最富效率的。在R语言中，用于存储数据的对象类型有：标量、向量、矩阵、数组、数据框和列表。其中，标量只是一个意义名词，本质上是一个只含单个元素的向量。</p><h3 id="1-向量"><a href="#1-向量" class="headerlink" title="1.向量"></a>1.向量</h3><p>与其他编程语言相类比的话，向量对标的是一维数组，但其定义使用的不是“[  ]”，而是“(   )”。它可以存储数值型数据、字符型数据、逻辑型数据。值得注意的是，向量里面的元素需要保持数据类型的一致性，不能混合多种数据类型。以下是常用的创建向量的途径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- c(1, 2, 3)             // [1] 1 2 3</span><br><span class="line">a &lt;- seq(1, 6, by=2)        // [1] 1 3 5</span><br><span class="line">a &lt;- 1:4                    // [1] 1 2 3 4</span><br><span class="line">rep(1:4, times=2)           // [1] 1 2 3 4 1 2 3 4</span><br><span class="line">rep(1:4, each=2)            // [1] 1 1 2 2 3 3 4 4</span><br></pre></td></tr></table></figure><h3 id="2-矩阵"><a href="#2-矩阵" class="headerlink" title="2.矩阵"></a>2.矩阵</h3><p>与向量类似，矩阵对标的是二维数组；个人认为矩阵是对向量的自然推广。它是一个二维数据，包含的元素同样要保持数据类型的一致性。注意，矩阵是不含行名和列名等信息的，是纯粹的二维数据集。<br>矩阵在创建时按列进行填充，可以指定byrow参数实现按行填充。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">matrix(1:10, nrow=2)</span><br><span class="line">//      [,1] [,2] [,3] [,4] [,5]</span><br><span class="line">// [1,]    1    3    5    7    9</span><br><span class="line">// [2,]    2    4    6    8   10</span><br><span class="line"></span><br><span class="line">// 注意上下两次矩阵的区别.</span><br><span class="line">matrix(1:10, nrow=2, byrow=TRUE)</span><br><span class="line">//      [,1] [,2] [,3] [,4] [,5]</span><br><span class="line">// [1,]    1    2    3    4    5</span><br><span class="line">// [2,]    6    7    8    9   10</span><br></pre></td></tr></table></figure><h3 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h3><p>数组又是对矩阵的自然推广，可以包含3维及以上的数据集。它也要保证元素的数据类型一致性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个2x3x4的数值型数组</span><br><span class="line">dim1 &lt;- c(&apos;a1&apos;, &apos;a2&apos;)</span><br><span class="line">dim2 &lt;- c(&apos;b1&apos;, &apos;b2&apos;, &apos;b3&apos;)</span><br><span class="line">dim3 &lt;- c(&apos;c1&apos;, &apos;c2&apos;, &apos;c3&apos;, &apos;c4&apos;)</span><br><span class="line">z &lt;- array(1:24, c(2, 3, 4), dimnames=list(dim1, dim2, dim3))</span><br></pre></td></tr></table></figure><h3 id="4-数据框"><a href="#4-数据框" class="headerlink" title="4.数据框"></a>4.数据框</h3><p>数据框的列可以包含不同模式的数据，该概念较矩阵来说更为一般；但是，每一列的列内部数据的模式必须唯一。<br>    实例标识符可通过data.frame的rowname选项指定。<br>    我们应该注意到，从形式上看，数据框与矩阵的形式是一致的，有行列组成的数据集。但是，数据框包含了其他的额外信息：行名和列名，列内部的数据类型一致性，以及列与列之间的数据类型可异性。就这点看，数据框的使用场景较之矩阵更为一般。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 列向量col1, col2, col3可为任何类型，每一列的名称可由函数names指定</span><br><span class="line">col1 &lt;- </span><br><span class="line">mydata &lt;- data.frame(col1, col2, col3, ...)</span><br></pre></td></tr></table></figure><h3 id="5-列表"><a href="#5-列表" class="headerlink" title="5.列表"></a>5.列表</h3><p>列表是一种比数据框、数组更为一般的数据类型。它允许不同的元素类型，这些元素类型可以是任意的对象，即其元素既可以是数组、矩阵、数据框，还可以是列表。列表这种数据结构存在的意义在于整合多个不同（无论是否有关联）的对象，形成一个由多种成分和对象的有序集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">partmt &lt;- mtcars[1:5, 1:5]</span><br><span class="line">a &lt;- list(name=&apos;John&apos;, score=c(110, 112, 98, 124), age=30, cars=partmt)</span><br><span class="line"></span><br><span class="line">//    $name</span><br><span class="line">//    [1] &quot;John&quot;</span><br><span class="line">//    </span><br><span class="line">//    $score</span><br><span class="line">//    [1] 110 112  98 124</span><br><span class="line">//    </span><br><span class="line">//    $age</span><br><span class="line">//    [1] 30</span><br><span class="line">//    </span><br><span class="line">//    $cars</span><br><span class="line">//                       mpg cyl disp  hp drat</span><br><span class="line">//    Mazda RX4         21.0   6  160 110 3.90</span><br><span class="line">//    Mazda RX4 Wag     21.0   6  160 110 3.90</span><br><span class="line">//    Datsun 710        22.8   4  108  93 3.85</span><br></pre></td></tr></table></figure><h3 id="6-数据的引用"><a href="#6-数据的引用" class="headerlink" title="6.数据的引用"></a>6.数据的引用</h3><p>对于所有数据结构中的元素来讲，基本上都可以通过下标进行引用；但其中还有一些区别.例如：</p><ul><li><p>元素引用通过下标，从1开始引用，超过元素个数的引用得到NA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- c(1, 2, 3)</span><br><span class="line">a[1]    // 1</span><br><span class="line">a[4]    // NA</span><br></pre></td></tr></table></figure></li><li><p>矩阵、数组、数据框的引用区分行列。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mtcars[1:2,]    // 添加逗号后，表明引用的是第1和第2行</span><br><span class="line">mtcars[1:2]     // 无逗号，引用的是第1列和第2列</span><br><span class="line">mtcars[1:2, 1:2]    // 引用1-2行中的1-2列</span><br></pre></td></tr></table></figure><ul><li><p>对于列名（标识符）的数据类型还可以通过标识符进行引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mtcars$mpg      // 引用第1列</span><br><span class="line">mtcars[,1]，mtcars[1]      // 与$mpg的引用结果相同</span><br></pre></td></tr></table></figure></li><li><p>对于列表来说，单个[]和双[[]]是不同的；前者引用结果是由被引用元素形成的列表，后者引用元素本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- list(name=&apos;John&apos;, score=c(110, 112, 98, 124), age=30, cars=partmt)</span><br><span class="line">a[2]            // 110 112 98 124</span><br><span class="line">class(a[2])     // &quot;list&quot;</span><br><span class="line">a[[2]]          // 110 112 98 124</span><br><span class="line">classs(a[[2]])  // &quot;numeric&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="因子"><a href="#因子" class="headerlink" title="因子"></a>因子</h3><p>因子，表面与数据结构无关；但通常与数据结构中的变量（即行）十分相关，有利于进一步表征数据的内在含义。通常来讲，变量可以分为名义型（分类型）、连续型或者有序型变量，这些变量都可以作为因子出现。<br>连续型变量通常是指那些可以得到连续性数据的变量，比如身高、体重等，这类变量可以是某个范围的任意值，可以同时表示顺序和数量，例如顺序上可以按照身高排序。<br>有序型变量通常指那些自带顺序的变量，比如学生的成绩排名，甚至粗暴点讲，时间日期等，它注重表达一种顺序关系，而非数量关系。<br>名义型变量是没有顺序之分的类别变量（分类型），比如男女性别之分。<br>使用因子的优点在于：对数据进行分类分组表示，便于数据分析、发现错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name &lt;- c(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;)</span><br><span class="line">sex &lt;- c(&apos;female&apos;, &apos;female&apos;, &apos;male&apos;, &apos;female&apos;)</span><br><span class="line">weight &lt;- c(45, 50, 62, 48)</span><br><span class="line">roles &lt;- data.frame(name, sex, weight)</span><br><span class="line">roles$sex &lt;- factor(roles$sex, levels=c(&apos;female&apos;, &apos;male&apos;), ordered=TRUE)</span><br><span class="line">// 通常来讲，R会自动将那些字符型变量转化为因子</span><br><span class="line"></span><br><span class="line">levels(roles$sex)   // &quot;female&quot; &quot;male&quot;</span><br><span class="line">droplevels(roles$sex)   // 删除无用的level, 例如female, male中含有kid这一level。</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>R语言中的数据结构有向量、矩阵、数组、数据框和列表，可以以下标的形式进行引用数据；数据框和列表也可以通过标识符引用数据。因子是对变量的一种定义，将变量进行分类排序，以利于数据分析。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，R是一门用于统计计算和作图的语言。但是，R不仅仅只是一门编程语言，由开发者们所提供的海量R包，使得R更像是一个用于数据计算与分析的环境。R是一个非常灵活的平台，是专用于探索、展示和理解数据的语言。既然在R中，一切都是与数据有关。那么就让我们先来认识一下R语言中，数据有哪些表示结构或者类型。&lt;br&gt;
    
    </summary>
    
      <category term="R语言" scheme="http://yoursite.com/categories/R%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="数据类型" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>
